#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { generatePrdWithCopilot, generateTasksWithCopilot, generateSubtasksWithCopilot, generateTaskTemplateWithCopilot, showCopilotInstructions, analyzeTaskComplexity, generateTaskBreakdownPrompt, generateProgressTrackingPrompt, generateNextjsTasksPrompt } = require('./taskmaster_utils');

const TASKMASTER_DIR = path.join(process.cwd(), '.taskmaster');
const PRD_PATH = path.join(TASKMASTER_DIR, 'prd.txt');
const TASKS_PATH = path.join(TASKMASTER_DIR, 'tasks.json');

function init() {
  if (!fs.existsSync(TASKMASTER_DIR)) {
    fs.mkdirSync(TASKMASTER_DIR);
  }
  if (!fs.existsSync(PRD_PATH)) {
    fs.writeFileSync(
      PRD_PATH,
      '# Exemple de PRD (Product Requirements Document)\n\n## Objectif\nCr√©er une application de gestion de t√¢ches simple.\n\n## Fonctionnalit√©s principales\n- Ajouter une t√¢che\n- Lister les t√¢ches\n- Marquer une t√¢che comme termin√©e\n- Supprimer une t√¢che\n\n## Contraintes\n- Interface en ligne de commande\n- Stockage local (fichier JSON)\n\n## Extensions possibles\n- Priorit√© des t√¢ches\n- Dates d‚Äô√©ch√©ance\n- Filtres par statut\n'
    );
  }
  if (!fs.existsSync(TASKS_PATH)) {
    fs.writeFileSync(TASKS_PATH, JSON.stringify({ tasks: [], lastId: 0 }, null, 2));
  }
  console.log('Initialisation termin√©e. Dossier .taskmaster pr√™t.');
}

function list() {
  if (!fs.existsSync(TASKS_PATH)) {
    console.error('Aucune t√¢che trouv√©e. Lancez d\'abord init.');
    process.exit(1);
  }
  const data = JSON.parse(fs.readFileSync(TASKS_PATH, 'utf-8'));
  if (data.tasks.length === 0) {
    console.log('Aucune t√¢che.');
    return;
  }
  data.tasks.forEach((task) => {
    console.log(`#${task.id} [${task.status}] ${task.title}`);
  });
}

function done(id) {
  if (!fs.existsSync(TASKS_PATH)) {
    console.error('Aucune t√¢che trouv√©e.');
    process.exit(1);
  }
  const data = JSON.parse(fs.readFileSync(TASKS_PATH, 'utf-8'));
  const task = data.tasks.find(t => t.id === Number(id));
  if (!task) {
    console.error(`T√¢che #${id} introuvable.`);
    process.exit(1);
  }
  task.status = 'done';
  fs.writeFileSync(TASKS_PATH, JSON.stringify(data, null, 2));
  console.log(`T√¢che #${id} marqu√©e comme termin√©e.`);
}

function show(id) {
  if (!fs.existsSync(TASKS_PATH)) {
    console.error('Aucune t√¢che trouv√©e.');
    process.exit(1);
  }
  const data = JSON.parse(fs.readFileSync(TASKS_PATH, 'utf-8'));
  const task = data.tasks.find(t => t.id === Number(id));
  if (!task) {
    console.error(`T√¢che #${id} introuvable.`);
    process.exit(1);
  }
  console.log(`#${task.id} [${task.status}] ${task.title}`);
  if (task.dependencies && task.dependencies.length > 0) {
    console.log('D√©pendances :', task.dependencies.join(', '));
  }
}

function next() {
  if (!fs.existsSync(TASKS_PATH)) {
    console.error('Aucune t√¢che trouv√©e.');
    process.exit(1);
  }
  const data = JSON.parse(fs.readFileSync(TASKS_PATH, 'utf-8'));
  
  // Trouve la prochaine t√¢che √† faire (sans d√©pendances bloquantes)
  const todoTasks = data.tasks.filter(t => t.status === 'todo');
  if (todoTasks.length === 0) {
    console.log('‚úÖ Toutes les t√¢ches sont termin√©es !');
    return;
  }
  
  const nextTask = todoTasks.find(task => {
    // V√©rifie si toutes les d√©pendances sont termin√©es
    if (!task.dependencies || task.dependencies.length === 0) return true;
    return task.dependencies.every(depId => {
      const dep = data.tasks.find(t => t.id === depId);
      return dep && dep.status === 'done';
    });
  });
  
  if (nextTask) {
    console.log(`üéØ Prochaine t√¢che √† faire :`);
    console.log(`#${nextTask.id} [${nextTask.status}] ${nextTask.title}`);
    if (nextTask.description) console.log(`Description: ${nextTask.description}`);
    if (nextTask.priority) console.log(`Priorit√©: ${nextTask.priority}`);
  } else {
    console.log('‚ö†Ô∏è  Aucune t√¢che disponible (d√©pendances bloquantes)');
    console.log('T√¢ches en attente:');
    todoTasks.forEach(task => {
      const blockedBy = task.dependencies?.filter(depId => {
        const dep = data.tasks.find(t => t.id === depId);
        return !dep || dep.status !== 'done';
      }) || [];
      if (blockedBy.length > 0) {
        console.log(`  #${task.id} ${task.title} (bloqu√©e par: ${blockedBy.join(', ')})`);
      }
    });
  }
}

function add(title) {
  if (!title) {
    console.error('Usage: node taskmaster.js add "Titre de la t√¢che"');
    process.exit(1);
  }
  
  if (!fs.existsSync(TASKS_PATH)) {
    console.error('Projet non initialis√©. Lancez d\'abord: node taskmaster.js init');
    process.exit(1);
  }
  
  const data = JSON.parse(fs.readFileSync(TASKS_PATH, 'utf-8'));
  const newId = data.lastId + 1;
  
  const newTask = {
    id: newId,
    title: title,
    status: 'todo',
    dependencies: [],
    priority: 'medium'
  };
  
  data.tasks.push(newTask);
  data.lastId = newId;
  
  fs.writeFileSync(TASKS_PATH, JSON.stringify(data, null, 2));
  console.log(`‚úÖ T√¢che #${newId} ajout√©e: ${title}`);
}

function remove(id) {
  if (!id) {
    console.error('Usage: node taskmaster.js remove <id>');
    process.exit(1);
  }
  
  if (!fs.existsSync(TASKS_PATH)) {
    console.error('Aucune t√¢che trouv√©e.');
    process.exit(1);
  }
  
  const data = JSON.parse(fs.readFileSync(TASKS_PATH, 'utf-8'));
  const taskIndex = data.tasks.findIndex(t => t.id === Number(id));
  
  if (taskIndex === -1) {
    console.error(`T√¢che #${id} introuvable.`);
    process.exit(1);
  }
  
  const removedTask = data.tasks.splice(taskIndex, 1)[0];
  
  // Supprime cette t√¢che des d√©pendances d'autres t√¢ches
  data.tasks.forEach(task => {
    if (task.dependencies) {
      task.dependencies = task.dependencies.filter(depId => depId !== Number(id));
    }
  });
  
  fs.writeFileSync(TASKS_PATH, JSON.stringify(data, null, 2));
  console.log(`üóëÔ∏è  T√¢che #${id} supprim√©e: ${removedTask.title}`);
}

function status() {
  if (!fs.existsSync(TASKS_PATH)) {
    console.error('Aucune t√¢che trouv√©e.');
    process.exit(1);
  }
  
  const data = JSON.parse(fs.readFileSync(TASKS_PATH, 'utf-8'));
  const total = data.tasks.length;
  const done = data.tasks.filter(t => t.status === 'done').length;
  const todo = data.tasks.filter(t => t.status === 'todo').length;
  const progress = total > 0 ? Math.round((done / total) * 100) : 0;
  
  console.log(`üìä Statut du projet:`);
  console.log(`   Total: ${total} t√¢ches`);
  console.log(`   ‚úÖ Termin√©es: ${done}`);
  console.log(`   üîÑ √Ä faire: ${todo}`);
  console.log(`   üìà Progression: ${progress}%`);
  
  if (todo > 0) {
    const nextTask = data.tasks.find(t => t.status === 'todo' && (!t.dependencies || t.dependencies.length === 0));
    if (nextTask) {
      console.log(`   üéØ Prochaine: #${nextTask.id} ${nextTask.title}`);
    }
  }
}

function generateTaskFile(id) {
  if (!fs.existsSync(TASKS_PATH)) {
    console.error('Aucune t√¢che trouv√©e.');
    process.exit(1);
  }
  
  const data = JSON.parse(fs.readFileSync(TASKS_PATH, 'utf-8'));
  const task = data.tasks.find(t => t.id === Number(id));
  
  if (!task) {
    console.error(`T√¢che #${id} introuvable.`);
    process.exit(1);
  }
  
  const tasksDir = path.join(process.cwd(), '.taskmaster', 'tasks');
  if (!fs.existsSync(tasksDir)) {
    fs.mkdirSync(tasksDir, { recursive: true });
  }
  
  const taskFile = path.join(tasksDir, `task_${String(id).padStart(3, '0')}.txt`);
  
  const content = `# Task ID: ${task.id}
# Title: ${task.title}
# Status: ${task.status}
# Dependencies: ${task.dependencies?.join(', ') || 'None'}
# Priority: ${task.priority || 'medium'}

# Description:
${task.description || 'No description provided'}

# Details:
${task.details || 'Implementation details to be defined'}

# Test Strategy:
${task.testStrategy || 'Testing approach to be defined'}

# Subtasks:
${task.subtasks?.map((st, i) => `${i + 1}. ${st.title} - ${st.description || ''}`).join('\n') || 'No subtasks defined'}

# Notes:
- Created: ${new Date().toISOString()}
- Last updated: ${new Date().toISOString()}
`;
  
  fs.writeFileSync(taskFile, content);
  console.log(`üìÑ Fichier de t√¢che g√©n√©r√©: ${taskFile}`);
}

function generateAllFiles() {
  if (!fs.existsSync(TASKS_PATH)) {
    console.error('‚ùå tasks.json introuvable.');
    process.exit(1);
  }
  
  const data = JSON.parse(fs.readFileSync(TASKS_PATH, 'utf-8'));
  
  if (!data.tasks || data.tasks.length === 0) {
    console.log('‚ÑπÔ∏è  Aucune t√¢che √† g√©n√©rer.');
    return;
  }
  
  const tasksDir = path.join(process.cwd(), '.taskmaster', 'tasks');
  if (!fs.existsSync(tasksDir)) {
    fs.mkdirSync(tasksDir, { recursive: true });
  }
  
  let generated = 0;
  
  data.tasks.forEach(task => {
    const taskFile = path.join(tasksDir, `task_${String(task.id).padStart(3, '0')}.txt`);
    
    const content = `# Task ID: ${task.id}
# Title: ${task.title}
# Status: ${task.status}
# Dependencies: ${task.dependencies?.join(', ') || 'None'}
# Priority: ${task.priority || 'medium'}
# Estimation: ${task.estimation || 'To be estimated'}

# Description:
${task.description || 'No description provided'}

# Implementation Details:
${task.details || 'Implementation details to be defined'}

# Test Strategy:
${task.testStrategy || 'Testing approach to be defined'}

# Subtasks:
${task.subtasks?.map((st, i) => `${st.id || `${task.id}.${i + 1}`}. ${st.title} - ${st.description || ''}`).join('\n') || 'No subtasks defined'}

# Notes:
- Created: ${new Date().toISOString()}
- Last updated: ${new Date().toISOString()}
- Project: ${data.meta?.projectName || 'Unknown'}

# Progress Tracking:
[ ] Task started
[ ] Implementation complete
[ ] Tests written
[ ] Tests passing
[ ] Task complete
`;
    
    fs.writeFileSync(taskFile, content);
    generated++;
  });
  
  console.log(`üìÑ ${generated} fichiers de t√¢ches g√©n√©r√©s dans .taskmaster/tasks/`);
  console.log('üí° Vous pouvez maintenant ouvrir et modifier chaque fichier individuellement.');
}

function generateAdvancedCopilotPrompt() {
  const PRD_PATH = path.join(process.cwd(), '.taskmaster', 'prd.txt');
  
  if (!fs.existsSync(PRD_PATH)) {
    console.error('‚ùå PRD introuvable. Cr√©ez d\'abord un PRD dans .taskmaster/prd.txt');
    process.exit(1);
  }

  const prd = fs.readFileSync(PRD_PATH, 'utf-8');
  
  console.log('\nüß† Prompt GitHub Copilot - G√©n√©rateur de T√¢ches Avanc√©');
  console.log('================================================================');
  console.log('');
  console.log('COPIEZ CE PROMPT COMPLET DANS COPILOT CHAT :');
  console.log('');
  console.log('```javascript');
  console.log('// GitHub Copilot: Analysez ce PRD et g√©n√©rez des t√¢ches de d√©veloppement structur√©es');
  console.log('// Votre r√¥le: Assistant de d√©veloppement expert en analyse de PRD');
  console.log('');
  console.log('// PRD √† analyser:');
  console.log('const monPRD = `');
  console.log(prd);
  console.log('`;');
  console.log('');
  console.log('// √âtape 1: Analyser le PRD');
  console.log('const analysePRD = {');
  console.log('  composantsPrincipaux: [');
  console.log('    // Copilot: Identifiez les composants syst√®me principaux');
  console.log('  ],');
  console.log('  modelesDonnees: [');
  console.log('    // Copilot: D√©finissez les structures de donn√©es n√©cessaires');
  console.log('  ],');
  console.log('  integrations: [');
  console.log('    // Copilot: Listez les APIs et services externes');
  console.log('  ],');
  console.log('  infrastructure: [');
  console.log('    // Copilot: Identifiez les besoins d\'infrastructure');
  console.log('  ],');
  console.log('  interfaceUtilisateur: [');
  console.log('    // Copilot: D√©crivez les interfaces (CLI, Web, Mobile)');
  console.log('  ]');
  console.log('};');
  console.log('');
  console.log('// √âtape 2: G√©n√©rer le projet structur√© au format Task Master');
  console.log('const projetTaskMaster = {');
  console.log('  "meta": {');
  console.log('    "projectName": "// Copilot: Nom du projet bas√© sur le PRD",');
  console.log('    "version": "1.0.0",');
  console.log('    "prdSource": ".taskmaster/prd.txt",');
  console.log('    "createdAt": "' + new Date().toISOString() + '",');
  console.log('    "updatedAt": "' + new Date().toISOString() + '",');
  console.log('    "description": "// Copilot: Description courte du projet"');
  console.log('  },');
  console.log('  "tasks": [');
  console.log('    {');
  console.log('      "id": 1,');
  console.log('      "title": "// Copilot: Premi√®re t√¢che fondamentale (ex: Configuration initiale)",');
  console.log('      "description": "// Copilot: Description br√®ve de la t√¢che",');
  console.log('      "status": "todo",');
  console.log('      "priority": "high", // high|medium|low');
  console.log('      "dependencies": [], // Aucune d√©pendance pour la premi√®re');
  console.log('      "details": `');
  console.log('        // Copilot: Instructions d√©taill√©es d\'impl√©mentation:');
  console.log('        // 1. √âtape sp√©cifique 1');
  console.log('        // 2. √âtape sp√©cifique 2');
  console.log('        // 3. √âtape sp√©cifique 3');
  console.log('      `,');
  console.log('      "testStrategy": "// Copilot: Comment valider cette t√¢che",');
  console.log('      "estimation": "// Copilot: Temps estim√© (ex: 2-3 heures)",');
  console.log('      "subtasks": [');
  console.log('        {');
  console.log('          "id": "1.1",');
  console.log('          "title": "// Copilot: Premi√®re sous-t√¢che sp√©cifique",');
  console.log('          "description": "// Copilot: Description d√©taill√©e de la sous-t√¢che",');
  console.log('          "status": "todo",');
  console.log('          "dependencies": [],');
  console.log('          "acceptanceCriteria": [');
  console.log('            "// Copilot: Crit√®re mesurable 1",');
  console.log('            "// Copilot: Crit√®re mesurable 2"');
  console.log('          ]');
  console.log('        }');
  console.log('        // Copilot: G√©n√©rez 2-4 autres sous-t√¢ches pour cette t√¢che');
  console.log('      ]');
  console.log('    },');
  console.log('    {');
  console.log('      "id": 2,');
  console.log('      "title": "// Copilot: Deuxi√®me t√¢che logique",');
  console.log('      "description": "// Copilot: Description de la t√¢che",');
  console.log('      "status": "todo",');
  console.log('      "priority": "// Copilot: high|medium|low selon l\'importance",');
  console.log('      "dependencies": [1], // D√©pend de la t√¢che 1 si n√©cessaire');
  console.log('      "details": `');
  console.log('        // Copilot: D√©tails d\'impl√©mentation pour cette t√¢che');
  console.log('      `,');
  console.log('      "testStrategy": "// Copilot: Strat√©gie de validation",');
  console.log('      "estimation": "// Copilot: Estimation temporelle",');
  console.log('      "subtasks": [');
  console.log('        // Copilot: Sous-t√¢ches pour la t√¢che 2');
  console.log('      ]');
  console.log('    }');
  console.log('    // Copilot: Continuez avec 5-15 t√¢ches suppl√©mentaires selon la complexit√© du PRD');
  console.log('    // Respectez l\'ordre logique: fondations ‚Üí fonctionnalit√©s ‚Üí tests ‚Üí d√©ploiement');
  console.log('  ],');
  console.log('  "lastId": "// Copilot: Mettez le dernier ID utilis√©"');
  console.log('};');
  console.log('');
  console.log('// R√®gles importantes pour Copilot:');
  console.log('// 1. PRIORIT√âS: high pour les fondations, medium pour les fonctionnalit√©s, low pour les am√©liorations');
  console.log('// 2. D√âPENDANCES: Logiques et sans cycles (ex: base de donn√©es avant API)');
  console.log('// 3. D√âTAILS: Sp√©cifiques et actionables, pas de "TODO" vagues');
  console.log('// 4. TESTS: Chaque t√¢che doit avoir sa strat√©gie de validation');
  console.log('// 5. ESTIMATIONS: R√©alistes (1-8 heures par t√¢che, subdivisez si plus)');
  console.log('// 6. SOUS-T√ÇCHES: 2-5 par t√¢che, atomiques et mesurables');
  console.log('// 7. D√âCOMPOSITION: Si une t√¢che semble complexe (>8h), la diviser en t√¢ches plus petites');
  console.log('// 8. ATOMICIT√â: Chaque t√¢che doit avoir un seul objectif clair et livrable');
  console.log('');
  console.log('// GESTION DE LA COMPLEXIT√â:');
  console.log('// - T√¢che simple (1-4h): Garder telle quelle avec des sous-t√¢ches claires');
  console.log('// - T√¢che moyenne (4-8h): Ajouter des sous-t√¢ches d√©taill√©es et points de contr√¥le');
  console.log('// - T√¢che complexe (>8h): OBLIGATOIRE de diviser en plusieurs t√¢ches ind√©pendantes');
  console.log('// - Une t√¢che = un livrable testable et fonctionnel');
  console.log('');
  console.log('// Phases sugg√©r√©es (adaptez selon votre PRD):');
  console.log('// Phase 1 (Fondations): Setup, mod√®les de donn√©es, architecture de base');
  console.log('// Phase 2 (Core): Fonctionnalit√©s principales, APIs, logique m√©tier');
  console.log('// Phase 3 (Interface): UI/UX, interactions utilisateur, int√©grations');
  console.log('// Phase 4 (Qualit√©): Tests, s√©curit√©, performance, documentation');
  console.log('// Phase 5 (D√©ploiement): CI/CD, monitoring, mise en production');
  console.log('```');
  console.log('');
  console.log('================================================================');
  console.log('üí° INSTRUCTIONS:');
  console.log('1. Copiez tout le contenu ci-dessus dans GitHub Copilot Chat');
  console.log('2. Copilot va analyser votre PRD et g√©n√©rer le JSON complet');
  console.log('3. Sauvegardez le r√©sultat dans .taskmaster/tasks.json');
  console.log('4. Utilisez "node taskmaster.js validate" pour v√©rifier la coh√©rence');
  console.log('');
}

function validateTasks() {
  if (!fs.existsSync(TASKS_PATH)) {
    console.error('‚ùå tasks.json introuvable.');
    process.exit(1);
  }

  const data = JSON.parse(fs.readFileSync(TASKS_PATH, 'utf-8'));
  console.log('üîç Validation des t√¢ches...\n');
  
  let errors = 0;
  let warnings = 0;
  
  // V√©rification de la structure meta
  if (!data.meta) {
    console.log('‚ùå Section "meta" manquante');
    errors++;
  } else {
    console.log('‚úÖ Section meta pr√©sente');
  }
  
  // V√©rification des t√¢ches
  if (!data.tasks || !Array.isArray(data.tasks)) {
    console.log('‚ùå Section "tasks" manquante ou invalide');
    errors++;
    return;
  }
  
  const taskIds = data.tasks.map(t => t.id);
  
  data.tasks.forEach((task, index) => {
    const prefix = `T√¢che #${task.id}:`;
    
    // V√©rifications obligatoires
    if (!task.title) {
      console.log(`‚ùå ${prefix} Titre manquant`);
      errors++;
    }
    if (!task.status) {
      console.log(`‚ùå ${prefix} Statut manquant`);
      errors++;
    }
    if (!['todo', 'in-progress', 'done', 'blocked'].includes(task.status)) {
      console.log(`‚ö†Ô∏è  ${prefix} Statut invalide: ${task.status}`);
      warnings++;
    }
    
    // V√©rification des d√©pendances
    if (task.dependencies) {
      task.dependencies.forEach(depId => {
        if (!taskIds.includes(depId)) {
          console.log(`‚ùå ${prefix} D√©pendance invalide: t√¢che #${depId} introuvable`);
          errors++;
        }
      });
    }
    
    // V√©rifications recommand√©es
    if (!task.priority) {
      console.log(`‚ö†Ô∏è  ${prefix} Priorit√© manquante`);
      warnings++;
    }
    if (!task.description) {
      console.log(`‚ö†Ô∏è  ${prefix} Description manquante`);
      warnings++;
    }
    if (!task.details) {
      console.log(`‚ö†Ô∏è  ${prefix} D√©tails d'impl√©mentation manquants`);
      warnings++;
    }
  });
  
  // V√©rification des d√©pendances circulaires
  function hasCyclicDependency(taskId, visited = new Set(), path = new Set()) {
    if (path.has(taskId)) return true;
    if (visited.has(taskId)) return false;
    
    visited.add(taskId);
    path.add(taskId);
    
    const task = data.tasks.find(t => t.id === taskId);
    if (task && task.dependencies) {
      for (const depId of task.dependencies) {
        if (hasCyclicDependency(depId, visited, path)) {
          return true;
        }
      }
    }
    
    path.delete(taskId);
    return false;
  }
  
  for (const task of data.tasks) {
    if (hasCyclicDependency(task.id)) {
      console.log(`‚ùå D√©pendance circulaire d√©tect√©e pour la t√¢che #${task.id}`);
      errors++;
    }
  }
  
  // R√©sum√©
  console.log('\nüìä R√©sum√© de validation:');
  console.log(`   Total t√¢ches: ${data.tasks.length}`);
  console.log(`   ‚ùå Erreurs: ${errors}`);
  console.log(`   ‚ö†Ô∏è  Avertissements: ${warnings}`);
  
  if (errors === 0) {
    console.log('‚úÖ Structure valide ! Pr√™t pour le d√©veloppement.');
  } else {
    console.log('‚ùå Corrigez les erreurs avant de continuer.');
  }
}

function regenerateFiles() {
  if (!fs.existsSync(TASKS_PATH)) {
    console.error('‚ùå tasks.json introuvable.');
    process.exit(1);
  }
  
  const data = JSON.parse(fs.readFileSync(TASKS_PATH, 'utf-8'));
  
  if (!data.tasks || data.tasks.length === 0) {
    console.log('‚ÑπÔ∏è  Aucune t√¢che √† r√©g√©n√©rer.');
    return;
  }
  
  const tasksDir = path.join(process.cwd(), '.taskmaster', 'tasks');
  if (!fs.existsSync(tasksDir)) {
    fs.mkdirSync(tasksDir, { recursive: true });
  }
  
  let regenerated = 0;
  
  data.tasks.forEach(task => {
    const taskFile = path.join(tasksDir, `task_${String(task.id).padStart(3, '0')}.txt`);
    
    // Seulement r√©g√©n√©rer si le fichier existe d√©j√†
    if (fs.existsSync(taskFile)) {
      const content = `# Task ID: ${task.id}
# Title: ${task.title}
# Status: ${task.status}
# Dependencies: ${task.dependencies?.join(', ') || 'None'}
# Priority: ${task.priority || 'medium'}
# Estimation: ${task.estimation || 'To be estimated'}

# Description:
${task.description || 'No description provided'}

# Implementation Details:
${task.details || 'Implementation details to be defined'}

# Test Strategy:
${task.testStrategy || 'Testing approach to be defined'}

# Subtasks:
${task.subtasks?.map((st, i) => `${st.id || `${task.id}.${i + 1}`}. ${st.title} - ${st.description || ''}`).join('\n') || 'No subtasks defined'}

# Notes:
- Created: ${new Date().toISOString()}
- Last updated: ${new Date().toISOString()}
- Project: ${data.meta?.projectName || 'Unknown'}

# Progress Tracking:
[ ] Task started
[ ] Implementation complete
[ ] Tests written
[ ] Tests passing
[ ] Task complete
`;
      
      fs.writeFileSync(taskFile, content);
      regenerated++;
    }
  });
  
  console.log(`üîÑ ${regenerated} fichiers de t√¢ches r√©g√©n√©r√©s dans .taskmaster/tasks/`);
}

function analyzeComplexity(id) {
  if (!id) {
    console.error('Usage: node taskmaster.js analyze-complexity <id>');
    process.exit(1);
  }
  
  const analysis = analyzeTaskComplexity(id);
  
  if (!analysis) {
    process.exit(1);
  }
  
  const { task, complexityScore, complexityLevel, needsBreakdown, suggestions } = analysis;
  
  console.log(`\nüîç Analyse de complexit√© - T√¢che #${task.id}`);
  console.log('================================================');
  console.log(`üìã Titre: ${task.title}`);
  console.log(`üìä Score de complexit√©: ${complexityScore}/10`);
  console.log(`üéØ Niveau: ${complexityLevel}`);
  console.log(`üîß D√©composition recommand√©e: ${needsBreakdown ? '‚úÖ OUI' : '‚ùå NON'}`);
  
  if (suggestions.length > 0) {
    console.log('\nüí° Suggestions:');
    suggestions.forEach((suggestion, i) => {
      console.log(`   ${i + 1}. ${suggestion}`);
    });
  }
  
  if (needsBreakdown) {
    console.log('\nüöÄ Actions recommand√©es:');
    console.log('   1. Utilisez: node taskmaster.js breakdown ' + id);
    console.log('   2. Copiez le prompt g√©n√©r√© dans GitHub Copilot Chat');
    console.log('   3. Remplacez la t√¢che complexe par les nouvelles t√¢ches d√©compos√©es');
    console.log('   4. Validez avec: node taskmaster.js validate');
  } else {
    console.log('\n‚úÖ Cette t√¢che semble d√©j√† bien dimensionn√©e.');
  }
}

function breakdownTask(id) {
  if (!id) {
    console.error('Usage: node taskmaster.js breakdown <id>');
    process.exit(1);
  }
  
  console.log(`üîß G√©n√©ration du prompt de d√©composition pour la t√¢che #${id}...`);
  generateTaskBreakdownPrompt(id);
}

function generateProgressReport() {
  console.log(`üîß G√©n√©ration du prompt de suivi de progression...`);
  generateProgressTrackingPrompt();
}

function help() {
  console.log(`Commandes disponibles :
  init                     Initialise le dossier .taskmaster
  list                     Liste toutes les t√¢ches
  next                     Affiche la prochaine t√¢che √† faire
  status                   Affiche le statut global du projet
  add "titre"              Ajoute une nouvelle t√¢che
  done <id>                Marque une t√¢che comme termin√©e
  show <id>                Affiche une t√¢che pr√©cise
  remove <id>              Supprime une t√¢che
  generate-file <id>       G√©n√®re un fichier individuel pour une t√¢che
  generate-all-files       G√©n√®re tous les fichiers individuels des t√¢ches
  regenerate-files         R√©g√©n√®re tous les fichiers existants
  validate                 Valide la structure et coh√©rence des t√¢ches
  parse-prd                G√©n√®re les t√¢ches √† partir du PRD (simple)
  
  üîç Analyse et d√©composition :
  analyze-complexity <id>  Analyse la complexit√© d'une t√¢che
  breakdown <id>           G√©n√®re un prompt Copilot pour d√©composer une t√¢che complexe
  
  üìä Suivi de projet :
  progress-report          G√©n√®re un prompt Copilot pour analyser la progression du projet
  
  üìñ Documentation :
  copilot-help             Affiche les instructions d√©taill√©es pour Copilot
  
  ü§ñ G√©n√©ration avec Copilot :
  generate-prd             G√©n√®re un prompt Copilot pour cr√©er un PRD
  generate-tasks           G√©n√®re un prompt Copilot simple pour cr√©er les t√¢ches
  generate-advanced        G√©n√®re un prompt Copilot avanc√© avec analyse PRD
  generate-subtasks <id>   G√©n√®re un prompt Copilot pour cr√©er des sous-t√¢ches
  generate-template <nom>  G√©n√®re un prompt Copilot pour cr√©er un template
  generate-nextjs-tasks    üöÄ G√©n√®re un prompt Copilot sp√©cialis√© Next.js + Admin
  
  help                     Affiche cette aide
`);
}

function parsePrd() {
  if (!fs.existsSync(PRD_PATH)) {
    console.error('PRD introuvable.');
    process.exit(1);
  }
  const prd = fs.readFileSync(PRD_PATH, 'utf-8');
  // On extrait les lignes de fonctionnalit√©s principales
  const featuresSection = prd.split('## Fonctionnalit√©s principales')[1]?.split('##')[0] || '';
  const lines = featuresSection.split('\n').map(l => l.trim()).filter(l => l.startsWith('- '));
  if (lines.length === 0) {
    console.error('Aucune fonctionnalit√© trouv√©e dans le PRD.');
    process.exit(1);
  }
  let tasks = [];
  let id = 1;
  lines.forEach(line => {
    tasks.push({
      id: id++,
      title: line.replace('- ', ''),
      status: 'todo',
      dependencies: []
    });
  });
  fs.writeFileSync(TASKS_PATH, JSON.stringify({ tasks, lastId: tasks.length }, null, 2));
  console.log(`${tasks.length} t√¢ches g√©n√©r√©es √† partir du PRD.`);
}

const cmd = process.argv[2];

switch (cmd) {
  case 'init':
    init();
    break;
  case 'list':
    list();
    break;
  case 'next':
    next();
    break;
  case 'status':
    status();
    break;
  case 'add':
    add(process.argv.slice(3).join(' '));
    break;
  case 'parse-prd':
    parsePrd();
    break;
  case 'done':
    done(process.argv[3]);
    break;
  case 'show':
    show(process.argv[3]);
    break;
  case 'remove':
    remove(process.argv[3]);
    break;
  case 'generate-file':
    generateTaskFile(process.argv[3]);
    break;
  case 'generate-all-files':
    generateAllFiles();
    break;
  case 'regenerate-files':
    regenerateFiles();
    break;
  case 'validate':
    validateTasks();
    break;
  case 'copilot-help':
    showCopilotInstructions();
    break;
  case 'generate-prd':
    generatePrdWithCopilot();
    break;
  case 'generate-tasks':
    generateTasksWithCopilot();
    break;
  case 'generate-advanced':
    generateAdvancedCopilotPrompt();
    break;
  case 'generate-subtasks':
    generateSubtasksWithCopilot(process.argv[3]);
    break;
  case 'generate-template':
    generateTaskTemplateWithCopilot(process.argv[3]);
    break;
  case 'analyze-complexity':
    analyzeComplexity(process.argv[3]);
    break;
  case 'breakdown':
    breakdownTask(process.argv[3]);
    break;
  case 'progress-report':
    generateProgressReport();
    break;
  case 'generate-nextjs-tasks':
    generateNextjsTasksPrompt();
    break;
  default:
    help();
}
